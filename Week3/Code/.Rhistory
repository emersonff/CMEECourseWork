MyDF[3]
MyDF[,3]
MyDF[,2]
MyDF[,1]
MyDF[1,1]
MyDF[1,2]
MyDF[1,3]
MyDF[2,1]
MyDF[c("MyFirstColumn", "My.Second.Column")]
MyDF[c("MyFirstColumn", "my.second.column")]
class(MyDF)
class(Col3)
str(MyDF)
head(MyDF)
tail(MyDF)
tail(mydf,2)
tail(MyDF,2)
head(MyDF,2)
a <- as.factor(c(1,2))
a
class(a)
levels(a)
class(MyDF$my.second.column)
levels(MyDF$my.second.column)
MyDF$my.second.column <- as.character(MyDF$my.second.column)
class(MyDF$my.second.column)
levels(MyDF$my.second.column)
str(MyDF)
MyList <- list(species=c("Quercus robur", "Fraxinus excelsior"), age=c(123,84))
mylist
MyList
MyList$species
MyList[1]
MyList[[1]
MyList[[1]]
MyList[:1]
MyList[1:]
MyList[]
MyList[["Species"]]
MyList[["species"]]
MyList[["species"]][1]
MyList[["species"]][2]
MyList[["species"]][3]
years <- 1990:2009
years
years <- 2009-1990
years
years <- 2009:1990
years
years <- seq(1,10,0.5)
years
years <- seq(1,10,0.3)
years
years <- seq(1,10,0.23)
years
?seq
seq(from=0,to=12,by=0.3)
MyVar <- c("a","b","c","d")
MyVar[2]
MyVar[c(3,2,1)]
MyVar[c(3,1,2)]
MyVar[c(3,1,3)]
v <-c(1,2,3,4,5)
v <-(0,1,2,3)
v <-c(0,1,2,3)
v
v[1]
v[1;3]
v[1:3]
v[-3]
v
v[3]
v[-3]
v
v[1:3]
v[c(1,3)]
mat1 <- matrix(1:25,5,5,byrow=TRUE)
mat1
mat1[1,2]
mat[1][2]
mat1[1][2]
mat1[1]
mat1
mat1[1]
mat1[12]
mat1[2,3]
mat1[1,2:4]
mat1[1,2]
mat1[1:3,2:3]
mat1[1,]
mat1[]
mat1[1]
mat1[1,]
mat1[,1]
a <-c(1,5)
a
a <-c(1:5)
a
a <-c(1,5)
a
a <-c(1,5)+2
a
x <-c(1,2)
y<-c(5,3,9,2)
x +y
x
y
x <-c(y,1)
c
x
x <-c(1,2)
x
y<-c(6,5,10,4)
y
x+c(y,1)
v <-c(0,1,2,3,4)
v
v2<-v*2
v2
v*v2
?t()
v
t(v)
v %*% t(v)
v
t(v)
v3 <- 1:7
v3
class(v3)
v3 <- c(1:7)
v3
class(v3)
v4 <- c(v2,v3)
v4
v2
v3
species.name <- "Quercus robur"
species.name
paste("Quercus", "robur")
paste("Quercus", "robur",sep=",")
paste("Quercus", "robur",sep="")
paste("Quercus", "robur",sep=".")
paste("Quercus", "robur",sep=",")
paste("year is:", 1990:2000)
strsplit("asd;asd;asd;fsa;dsa",";")
nchar("asdfghjkl")
toupper("asdfg")
strsplit("asd;asd;asd;fsa;dsa",";")[1]
strsplit("asd;asd;asd;fsa;dsa",";")[1][1]
strsplit("asd;asd;asd;fsa;dsa",";")(1:2)
strsplit("asd;asd;asd;fsa;dsa",";")[1:2]
strsplit("asd;asd;asd;fsa;dsa",";")[1][2]
strsplit("asd;asd;asd;fsa;dsa",";")[1]
strsplit("asd;asd;asd;fsa;dsa",";")[12]
strsplit("asd;asd;asd;fsa;dsa",";")[2]
strsplit("asd;asd;asd;fsa;dsa",";")[1,2]
a=strsplit("a b c d e f"," ")
a
a[1]
a[2]
a[1,2]
class(a)
a[[1]]
a$1[1]
a$1
a$[1][1]
a[1][]1
a[1][1]
a[1]
a[[1]]
a[[1][1]]
a[[2]
a[[2]]
a[1]
a
names(a)<-c("name")
a
a$name[1]
a$name[2]
a
names(a)<-""
a
a[[1]]
a[[1]][1]
log(a)
log(mat1)
mat1
log10(mat1)
exp(mmatrix(data, nrow = rows, ncol = cols))
exp(mat1)
floor(mat1)
mat1
floor(23)
floor(23,24,25)
floor(c(24,25,26))
?floor()
ceiling(23)
ceiling(mat1)
sin(30)
cos(45)
pi
sd(c(1,2,3,4,5))
var(c(1,2,3,4,5))
a<-(1,2,3,4,5)
a<-c(1,2,3,4,5)
median(a)
quantile(a,0.05)
quantile(a,0.2)
quantile(a,0.25)
quantile(a,0.5)
quantile(a,0.0)
range(a)
summary(a)
?summary()
b <-(3,4,5,6,7)
b <-c(3,4,5,6,7)
a
c
n
b
union(a,b)
intersect(a,b)
setdiff(a,b)
setdiff(b,a)
setequal(b,a)
s.element(a,b)
s.element(2,b)
is.element(2,b)
is.element(a,b)
rnorm(10.m=0,sd=1)
rnorm(10,m=0,sd=1)
a<-rnorm(10,m=0,sd=1)
mean(a)
sd(a)
dnorm(a,m=0,sd=1)
qnorm(a,m=0,sd=1)
runif(20,min=0,max=2)
rpois(20,lambda=10)
set.seed(1999)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
rnorm(1)
pwd
pwd()
getwd()
?sample()
?unique()
?lapply()
?sample()
getwd()
dir()
MyData <- read.csv("../Data/trees.csv")
ls()
MyData
head(MyData)
str(MyData)
MyData <- read.csv("../Data/trees.csv", header = TRUE)
head(MyData)
MyData <- read.csv("../Data/trees.csv", header = FALSE)
head(MyData)
MyData <- read.csv("../Data/trees.csv", header = TRUE)
head(MyData)
MyData <- read.csv("../Data/trees.csv", sep=",", header = TRUE)
head(MyData)
class(MyData)
MyData <- read.csv("../Data/trees.csv", skip=5)
head(MyData)
write.csv(Mydata, "../Results/MyData.csv")
write.csv(MyData, "../Results/MyData.csv")
dir("../Results")
write.table(MyData[1,],file="../Result/MyData.csv")
write.table(MyData[1,],file="../Results/MyData.csv")
write.table(MyData[1,],file="../Results/MyData.csv", append=TRUE)
write.csv(MyData,"../Results/MyData.csv", row.names = TRUE)
write.csv(MyData,"../Results/MyData.csv", col.names = FALSE)
write.table(MyData,"../Results/MyData.csv", col.names = FALSE)
MyData <-read.csv("../Results/MyData.csv", header =TRUE)
head(MyData)
source('~/Documents/CMEECourseWork/Week3/Code/sample.R')
MyData <- read.csv("../Data/trees.csv")
head(MyData)
str(MyData)
MyData <-read.csv("../Data/trees.csv",header = TRUE)
head(MyData)
MyData <-read.table("../Data/trees.csv", sep = ",",header = TRUE)
head(MyData)
write.csv(MyData,"../Results/MyData.csv")
MyData <-read.csv("../Results/MyData.csv")
head(MyData)
write.csv(MyData, "../Results/MyData.csv",row.names=TRUE)
write.csv(MyData,"../Results/MyData.csv")
?write.csv()
MyData <-read.table("../Data/trees.csv", sep = ",",header = TRUE)
write.csv(MyData,"../Results/MyData.csv")
write.csv(MyData,"../Results/MyData.csv",row.names = TRUE,col.names = FALSE)
write.csv(MyData,"../Results/MyData.csv",row.names = TRUE)
?read.csv()
?write.csv()
?write.table()
?write.csv()
?write.csv()
MyData <-read.csv("../Data/trees.csv", header = TRUE)#imports with headers.Tho the default value for header is TRUE already
head(MyData)
write.csv(MyData, "../Results/MyData.csv") #write it out as a new file default value of row.names and col.names are both TRUE.
head(../Results/MyData.csv)
write.table(MyData[1,], file="../Results/MyData.csv", append = TRUE)#Append header(first row) to the file
write.table(MyData[1,], file="../Results/MyData.csv", append = TRUE)#Append header(first row) to the file
write.csv(MyData, "../Results/MyData.csv") #write it out as a new file default value of row.names and col.names are both TRUE.
write.csv(MyData, "../Results/MyData.csv", row.names = TRUE)#write row names.
write.table(MyData, "../Results/MyData.csv", col.names = FALSE)#ignore column names
write.table(MyData[1,], file="../Results/MyData.csv", append = TRUE)#Append header(first row) to the file
write.csv(MyData, "../Results/MyData.csv") #write it out as a new file default value of row.names and col.names are both TRUE.
write.table(MyData[1,], file="../Results/MyData.csv", append = TRUE)#Append header(first row) to the file
write.table(MyData, "../Results/MyData.csv", col.names = FALSE)#ignore column names
?write.table()
write.table(MyData[1,], file="../Results/MyData.csv", append = TRUE,col.names = FALSE)#Append header(first row) to the file
source(basic_io.R)
gwd()
getwd()
source(basic_io.R)
source("basic_io.R")
?runif()
1:10
a <- TRUE
if (a == TRUE){
print("a is true")
}else{
print("a is false")
}
##If statement in a single line
z <- runif(1)##uniformly distributed random number
if(z <= 0.5) {print("Less than a half")}
##If statement in a single line
z <- runif(1)##uniformly distributed random number
if(z <= 0.5) {print("Less than a half")}
##If statement in a single line
z <- runif(1)##uniformly distributed random number
if(z <= 0.5) {print("Less than a half")}
##If statement in a single line
z <- runif(1)##uniformly distributed random number
if(z <= 0.5) {print("Less than a half")}
##If statement in a single line
z <- runif(1)##uniformly distributed random number
if(z <= 0.5) {print("Less than a half")}
##If statement in a single line
z <- runif(1)##uniformly distributed random number
if(z <= 0.5) {print("Less than a half")}
##If statement in a single line
z <- runif(1)##uniformly distributed random number
if(z <= 0.5) {print("Less than a half")}
##For loop using a sequence
for(i in 1:10){
j <- i * i
print(paste(i, " squared is", j))##pastes elements together using space
}
##For loop over vector of strings
for (species in c("Heliodoxa rubinoides", 'Boissonneaua jardini', 'Sula nebouxii')){
print(paste("The species is", species))
}
v1 <- c("a", "bc", "def")
for(i in v1){
print(i)
}
##While loop
i <-0
while (i < 10){
i <- i +1
print(i^2)
}
i <- 0 #Initialize i
while (i < Inf) {
if(i == 10){
break
}# break out of the loop
else{
cat("i equals " , i , " \n")
i <-i + 1
}
}
?cat()
for(i in 1:10){
if((i %% 2 == 0))
next #pass to the next iteration of loop
print(i)
}
source("boilerplate.R")
source("boilerplate.R")
ls()
class(MyFunction())
class(MyFunction
)
source("TreeHight.R")
source("TreeHeight.R")
data <- read.csv("../Data/trees.csv", header = FALSE)
data[1]
data[2]
data <- read.csv("../Data/trees.csv")
data
data[1]
data
for(i in data){}
for(i in data){print(i[1])}
for(i in data){i}
lenth(data)
length(data)
length(data[1])
data[1][1]
data[1,2]
data[2,1]
data[3,1]
data[5,1]
data[2,1]
str(data)
for(i in data){cat(i)}
for(i in data){print(i)}
data[1]
data[1][2]
data[12
]
data[12]
data$Species
?apply()
?dim()
dim(data)
return data
return (data)
source('~/Documents/CMEECourseWork/Week3/Code/Vectorize1.R')
a <-NA
a <- NA
for (i in 1:10) {
a <- c(a, i)
print(a)
print(object.size(a))
}
?rep()
a <- rep(NA, 10)
for (i in 1:10) {
a[i] <- i
print(a)
print(object.size(a))
}
source('~/Documents/CMEECourseWork/Week3/Code/preallocate.R')
source('~/Documents/CMEECourseWork/Week3/Code/preallocate.R')
source('~/Documents/CMEECourseWork/Week3/Code/preallocate.R')
source('~/Documents/CMEECourseWork/Week3/Code/preallocate.R')
source('~/Documents/CMEECourseWork/Week3/Code/preallocate.R')
source('~/Documents/CMEECourseWork/Week3/Code/preallocate.R')
source('~/Documents/CMEECourseWork/Week3/Code/preallocate.R')
source('~/Documents/CMEECourseWork/Week3/Code/apply1.R')
?apply()
source('~/Documents/CMEECourseWork/Week3/Code/apply1.R')
source('~/Documents/CMEECourseWork/Week3/Code/apply1.R')
source('~/Documents/CMEECourseWork/Week3/Code/apply1.R')
source('~/Documents/CMEECourseWork/Week3/Code/apply2.R')
source('~/Documents/CMEECourseWork/Week3/Code/apply2.R')
source('~/Documents/CMEECourseWork/Week3/Code/apply2.R')
source('~/Documents/CMEECourseWork/Week3/Code/apply2.R')
source('~/Documents/CMEECourseWork/Week3/Code/sample.R')
source('~/Documents/CMEECourseWork/Week3/Code/sample.R')
?sample()
?vector()
?lappy()
?lapply
?function
function(i)
?function()
d
source('~/Documents/CMEECourseWork/Week3/Code/sample.R')
?rnorm()
?hist()
source('~/Documents/CMEECourseWork/Week3/Code/sample.R')
source('~/Documents/CMEECourseWork/Week3/Code/sample.R')
source('~/Documents/CMEECourseWork/Week3/Code/sample.R')
source('~/Documents/CMEECourseWork/Week3/Code/sample.R')
source('~/Documents/CMEECourseWork/Week3/Code/sample.R')
source('~/Documents/CMEECourseWork/Week3/Code/sample.R')
popn
sample(popn,20,replace = FALSE)
x <- 1:20
X
x
y <- factor(rep(letters[1:5], each = 4))
tapply(x, y, sum)
attach(iris)
iris
by(iris[,1:2], iris$Species, colMeans)
?by
?replicate
runif(5)
replicate(10, runif(5))
install.packages("plyr")
?round
count = round(runif(9, 0, 20)))
count = round(runif(9, 0, 20))
count
?runif
?sd
?fn()
result <- vector("list", 100){#Preallocate/Initialize
?trr()
?try()
?tryCatch
tryCatch(1, finally = print("Hello"))
?exp()
source('~/Documents/CMEECourseWork/Week3/Code/browse.R')
q
install.packages(c("ggplot2","reshape2"))
install.packages("knitr")
